scalar DateTimeISO
scalar EmailAddress

type Query {
  order(id: ID!): Order!
  consumer(id: ID!): Consumer!
  restaurant(id: ID!): Restaurant!
  restaurants: [Restaurant!]!
  ticket(id: ID!): Ticket!
  delivery(id: ID!): Delivery!
  courier(id: ID!): Courier!
}

type Mutation {
  createRestaurant(r: CreateRestaurantInput!): ID!

  createConsumer(c: ConsumerInput!): Consumer!

  createOrder(o: CreateOrderInput!): Order!

  acceptTicket(ticketId: ID!, readyBy: DateTimeISO!): ID!

  depositAccount(accountId: ID!, amount: MoneyInput!): Account!
  withdrawAccount(accountId: ID!, amount: MoneyInput!): Account!

  pickupDelivery(id: ID!): ID!
  dropoffDelivery(id: ID!): ID!

  createCourier(c: CourierInput!): ID!
  updateCourierAvailability(id: ID!, available: Boolean!): Courier!
}

type Money {
  amount: String!
}

input MoneyInput {
  amount: String!
}

type Consumer {
  id: ID!
  name: String!
  account: Account!
  orders: [Order!]!
}

type Order {
  id: ID!
  state: OrderState!
  lineItems: [OrderLineItem!]!
  consumer: Consumer
  restaurant: Restaurant
  deliveryInfo: DeliveryInfo!
  ticket: Ticket
}

type OrderLineItem {
  quantity: Int!
  menuItemId: String!
  name: String!
  price: Money!
}

input CreateRestaurantInput {
  name: String!
  menuItems: [MenuItemInput!]!
  manager: ManagerInput!
}

input ManagerInput {
  email: EmailAddress!
  password: String!
}

input MenuItemInput {
  id: ID!
  name: String!
  price: MoneyInput!
}

type Restaurant {
  id: ID!
  name: String!
  menuItems: [MenuItem!]!

  tickets(after: String, first: Int, before: String, last: Int): TicketEdges!
}

type MenuItem {
  id: ID!
  name: String!
  price: Money!
}

type TicketEdges {
  edges: [TicketEdge!]!
}

type TicketEdge {
  node: Ticket!
  cursor: String!
}

type Account {
  id: ID!
  balance: Money!
}

type Ticket {
  id: ID!
  state: TicketState!
  sequence: Int
  lineItems: [TicketLineItem!]!

  readyBy: DateTimeISO
  acceptTime: DateTimeISO
  preparingTime: DateTimeISO
  pickedUpTime: DateTimeISO
  readyForPickupTime: DateTimeISO

  restaurant: Restaurant!
}

type TicketLineItem {
  quantity: Int!
  menuItemId: String!
  name: String!
}

type DeliveryInfo {
  status: DeliveryStatus!
  estimatedDeliveryTime: String
  assignedCourier: String
}

type Delivery {
  id: ID!
  state: DeliveryState!
  assignedCourier: Courier
  courierActions: [DeliveryActionInfo!]!
}

type Courier {
  id: ID!
  available: Boolean!
  plan: CourierPlan!
}

type CourierPlan {
  actions: [CourierAction!]!
}

type CourierAction {
  type: DeliveryAction!
  delivery: Delivery!
  address: String!
  time: DateTimeISO!
}

type DeliveryActionInfo {
  type: DeliveryAction!
}

input ConsumerInput {
  email: String!
  password: String!
}

input CreateOrderInput {
  consumerId: String!
  restaurantId: String!
  lineItems: [MenuItemIdAndQuantity!]!
  deliveryAddress: String!
}

input MenuItemIdAndQuantity {
  menuItemId: String!
  quantity: Int!
}

input CourierInput {
  email: String!
  password: String!
}

enum DeliveryStatus {
  PREPARING
  READY_FOR_PICKUP
  PICKED_UP
  DELIVERED
}

enum OrderState {
  APPROVAL_PENDING
  APPROVED
  REJECTED
  CANCEL_PENDING
  CANCELLED
  REVISION_PENDING
}

enum TicketState {
  CREATE_PENDING
  AWAITING_ACCEPTANCE
  ACCEPTED
  PREPARING
  READY_FOR_PICKUP
  PICKED_UP
  CANCEL_PENDING
  CANCELLED
  REVISION_PENDING
}

enum DeliveryState {
  PENDING
  SCHEDULED
  CANCELLED
}

enum DeliveryAction {
  PICKUP
  DROPOFF
}
