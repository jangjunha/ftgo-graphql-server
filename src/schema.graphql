type Query {
  order(id: ID!): Order!
  consumer(id: ID!): Consumer!
  restaurant(id: ID!): Restaurant!
}

type Mutation {
  createConsumer(c: ConsumerInfo!): Consumer!

  depositAccount(accountId: ID!, amount: MoneyInput!): Account!
  withdrawAccount(accountId: ID!, amount: MoneyInput!): Account!
}

type Money {
  amount: String!
}

type Consumer {
  id: ID!
  name: String!
  account: Account!
  orders: [Order!]!
}

type Order {
  id: ID!
  lineItems: [OrderLineItem!]!
  consumer: Consumer
  restaurant: Restaurant
  deliveryInfo: DeliveryInfo!
}

type OrderLineItem {
  quantity: Int!
  menuItemId: String!
  name: String!
  price: Money!
}

type Restaurant {
  id: ID!
  name: String!
  menuItems: [MenuItem!]!
}

type MenuItem {
  id: ID!
  name: String!
  price: Money!
}

type Account {
  id: ID!
  balance: Money!
}

type DeliveryInfo {
  status: DeliveryStatus!
  estimatedDeliveryTime: String
  assignedCourier: String
}

input ConsumerInfo {
  name: String!
}

enum DeliveryStatus {
  PREPARING
  READY_FOR_PICKUP
  PICKED_UP
  DELIVERED
}
